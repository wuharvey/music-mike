Introduction Section
### Introduction
Western music is usually notated on a five-line staff, on which **notes** are given a **duration** based on symbol type, and **pitch** based on location in the staff. Composers can use proprietary software such as Sibelius or Finale to manipulate a virtual five-line staff through mouse clicks or keyboard gestures. Fans of computer music might instead use music synthesis libraries to programmatically create music in languages such as C++, but such libraries can be unintuitive for musicians unfamiliar with signals and waves.

We propose Music-mike, a compiled, strongly typed, functional programming language, to give users an alternative option in music creation. Music-mike is designed for users to create music based on varied manipulations of short patterns. We owe this idea to Note Hashtag, a previous project completed in COMS W4115. However, unlike Note Hashtag, Music-mike is **modal** rather than **key-based**. Furthermore, lists - treated as the fundamental building block of music - are manipulated with special list operators (syntactic sugar) which create an intuitive interface based on traditional staff notation.

### Design Ethos
The most basic unit in music is a **note**, which can be decomposed into pitch and duration. A simple melody can thus be described as two lists: one list of pitches and another of durations. A **chord** is a collection of notes played simultaneously.

A set of pitches is defined as a **mode**. All modes are subsets of the chromatic scale, which contains all twelve pitch classes used in Western music. Most music constrains the pitches of its notes to a small set of familiar modes, such as the major and minor scales. The sound of a **chord** is very much dependent on the **mode** that its notes come from.

Music-mike is based on the following observations regarding Western music: one, that Western music is fundamentally  **chordal** and **modal**. Two, that Western music is repetitive and manipulative: simple building blocks of music are modified, then repeated multiple times in a piece. Finally, and most importantly, that these simple building blocks can described using lists and altered using a functional paradigm.

Language Tutorial Section
LRM Section
Project Plan Section
A. Process
  i. Planning
  Our team met regularly twice a week on Wednesdays to meet with our TA Jacob Graff and
  on Sundays to work together as a team, debrief and set the course for the rest of the week. We used
  our Wednesday meetings as an opportunity to track and gauge our progress and also ask questions about
  difficult problems we came across during the previous week. We also talked about goals and milestones for the next
  Wednesday meeting and talked about any potential problems related to the difficulties of the goals we defined but also
  about any foreseeable road blocks related to tests, projects, other classes etc. that might hinder our progress. We used
  these meetings to make sure our project was progressing but also to shift our timeline to account for future roadblocks and delays.

  ii. Development
  Our team used github issues to define specifications and tasks that needed to be implemented or completed. We used github to help
  with organizing our development. Each of used a separate branch to develop the feature that we were working on and then submitted a pull
  request to the main branch once we thought it was ready. Then, another member of the team would review that request and merge the request. This ensured
  that all the code we pushed had been code reviewed and helped us maintain the quality of our mainline code. 

  iii. Testing
  We developed a test suite that tested individual components of the compiler. Every time one of
  us was working on a small component, we first wrote a test for how that component was supposed to work
  once it was finished. When writing In this regard, we used some principles of Test-First Programming to make sure we were preserving
  the functionality of the older features but also ensuring functionality of the new ones. While some of these tests were forward
  looking and failed early-on, the error messages told the developer whether we were making progress towards making these larger full stack
  tests work or if it was failing in whatever module the developer was working on.
