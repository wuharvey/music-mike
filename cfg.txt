
//need to define scoping to finish this stuff


program= decls EOF

decls= expr ; decls | e

expr -> decl | fun | type | stmt | loop


//if then else? how to integrate
stmt -> dstmt | cstmt
    dstmt: if quer then stmt | if quer then cstmt else dstmt
    cstmt: if quer then cstmt else cstmt | decls
        quer -> data == data | data > data | data < data | data >= data | data <= data 

decl -> name = stmt 
   
    data -> list | fun | prim | tuple | name
    
        name-> [$a-$Z][$a-$Z, $0-$9, _]*  //name of variable
    
        tuple -> << tuple_inside >>
            tuple_inside -> _ tuple | e

        list -> plist | rlist | reglist
            plist -> p:[ pitch ] 
                pitch -> chord pitch | e
                    chord -> note / note
                        note -> preop note postop | int | e
                            preop -> ^ preop | v preop | e
                            postop -> # postop | b postop | e
            rlist -> r:[ rhythm ]
                rhythm -> beat rhythm | e
                    beat -> beat bpo | char | float
                        bpo -> o
       
            reglist -> [ reg ]
                reg -> _ reg | e
        
   

        prim -> bool | unit | num | str | char  
            bool -> bool || bool | bool && bool | true | false
            num -> int | float
                float -> int . int | .int | int.

            str -> " [$0-$9, $a-$Z, _ ]*"
            char -> ' [$a-$Z, $0-$9] '

    

fun -> 

type->

loop-> for element in list { decls }
    element-> name
 

